import { wasm, simd, clamp, to_u32, endianness } from '../../_.mjs';

let mod = null;
const st = 64 * 1024;
const ceil = Math.ceil;

export default function invert(fb, amount) {
  const len = fb.buffer.length;
  if (wasm && simd && st < len && 1 > amount) return invert_simd(fb, amount);
  else               return (endianness ? invert_le : invert_be)(fb, amount);
}

export function invert_simd(fb, amount) {
  if (mod === null) init_mod();
  const { invert, memory } = new WebAssembly.Instance(mod).exports;

  memory.grow(ceil((16 + fb.buffer.length) / 65536));

  const u32 = to_u32(fb.buffer);
  const o32 = new Uint32Array(memory.buffer, 16, u32.length);
  o32.set(u32); invert(fb.width, fb.height, amount); u32.set(o32);
}

export function invert_le(fb, amount) {
  const u32 = to_u32(fb.buffer);
  const len = fb.buffer.length / 4;
  const famount = clamp(0.0, amount, 1.0);
  const iamount = clamp(0.0, 1.0 - amount, 1.0);

  if (1.0 == famount) for (let offset = 0; len > offset; offset += 1) {
    const c = u32[offset];
    u32[offset] = ~c & 0xffffff | (c >> 24 << 24);
  }

  else for (let offset = 0; len > offset; offset += 1) {
    const c = u32[offset];

    const rr = c & 0xff;
    const gg = (c >> 8) & 0xff;
    const bb = (c >> 16) & 0xff;

    const r = (rr * iamount + famount * (255.0 - rr)) | 0;
    const g = (gg * iamount + famount * (255.0 - gg)) | 0;
    const b = (bb * iamount + famount * (255.0 - bb)) | 0;

    u32[offset] = r | (g << 8) | (b << 16) | (c >> 24 << 24);
  }
}

export function invert_be(fb, amount) {
  const u32 = to_u32(fb.buffer);
  const len = fb.buffer.length / 4;
  const famount = clamp(0.0, amount, 1.0);
  const iamount = clamp(0.0, 1.0 - amount, 1.0);

  if (1.0 == famount) for (let offset = 0; len > offset; offset += 1) {
    const c = u32[offset];
    u32[offset] = ~(c >> 8) << 8 | (c & 0xff);
  }

  else for (let offset = 0; len > offset; offset += 1) {
    const c = u32[offset];

    const rr = (c >> 24) & 0xff;
    const gg = (c >> 16) & 0xff;
    const bb = (c >>  8) & 0xff;

    const r = (rr * iamount + famount * (255.0 - rr)) | 0;
    const g = (gg * iamount + famount * (255.0 - gg)) | 0;
    const b = (bb * iamount + famount * (255.0 - bb)) | 0;

    u32[offset] = (c & 0xff) | (b << 8) | (g << 16) | (r << 24);
  }
}

function init_mod() {
  mod = new WebAssembly.Module(Uint8Array.of(0,97,115,109,1,0,0,0,1,7,1,96,3,127,127,125,0,3,2,1,0,5,3,1,0,1,7,19,2,6,109,101,109,111,114,121,2,0,6,105,110,118,101,114,116,0,0,10,198,5,1,195,5,3,3,127,4,123,2,125,32,0,32,1,108,34,0,65,255,255,255,255,3,113,33,3,2,64,32,2,67,0,0,128,63,32,2,67,0,0,128,63,93,27,67,0,0,0,0,151,34,11,67,0,0,128,63,91,4,64,32,3,69,13,1,32,3,65,4,79,4,64,65,16,33,1,32,3,32,0,65,3,113,34,5,107,34,4,33,0,3,64,32,1,32,1,253,0,4,0,253,12,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,253,81,253,11,4,0,32,1,65,16,106,33,1,32,0,65,4,107,34,0,13,0,11,32,5,69,13,2,11,32,3,32,4,107,33,0,32,4,65,2,116,65,16,106,33,1,3,64,32,1,32,1,40,2,0,65,255,255,255,7,115,54,2,0,32,1,65,4,106,33,1,32,0,65,1,107,34,0,13,0,11,12,1,11,32,3,69,13,0,67,0,0,128,63,32,2,147,34,2,67,0,0,128,63,32,2,67,0,0,128,63,93,27,67,0,0,0,0,151,33,2,32,3,65,4,79,4,64,32,11,253,19,33,8,32,2,253,19,33,9,65,16,33,1,32,3,32,0,65,3,113,34,5,107,34,4,33,0,3,64,32,1,253,0,4,0,34,6,253,12,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,253,78,253,251,1,33,7,32,1,32,6,253,12,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,253,78,253,12,0,0,127,67,0,0,127,67,0,0,127,67,0,0,127,67,32,7,253,229,1,32,8,253,230,1,32,9,32,7,253,230,1,253,228,1,253,249,1,253,80,253,12,0,0,127,67,0,0,127,67,0,0,127,67,0,0,127,67,32,6,65,8,253,173,1,253,12,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,253,78,253,251,1,34,7,253,229,1,32,8,253,230,1,32,9,32,7,253,230,1,253,228,1,253,249,1,65,8,253,171,1,253,80,253,12,0,0,127,67,0,0,127,67,0,0,127,67,0,0,127,67,32,6,65,16,253,173,1,253,12,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,253,78,253,251,1,34,6,253,229,1,32,8,253,230,1,32,9,32,6,253,230,1,253,228,1,253,249,1,65,16,253,171,1,253,80,253,11,4,0,32,1,65,16,106,33,1,32,0,65,4,107,34,0,13,0,11,32,5,69,13,1,11,32,3,32,4,107,33,3,32,4,65,2,116,65,16,106,33,1,3,64,32,1,67,0,0,127,67,32,1,40,2,0,34,0,65,255,1,113,179,34,10,147,32,11,148,32,2,32,10,148,146,252,1,32,0,65,128,128,128,120,113,114,67,0,0,127,67,32,0,65,8,118,65,255,1,113,179,34,10,147,32,11,148,32,2,32,10,148,146,252,1,65,8,116,114,67,0,0,127,67,32,0,65,16,118,65,255,1,113,179,34,10,147,32,11,148,32,2,32,10,148,146,252,1,65,16,116,114,54,2,0,32,1,65,4,106,33,1,32,3,65,1,107,34,3,13,0,11,11,11));
}