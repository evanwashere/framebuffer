import { clamp, to_u32 } from '../../_.mjs';

let mod = null;
const ceil = Math.ceil;

export default opacity;

export function opacity(fb, amount) {
  const u8 = fb.buffer;
  const len = fb.buffer.length;
  amount = clamp(0.0, amount, 1.0);

  for (let offset = 3; len > offset; offset += 4) {
    u8[offset] *= amount;
  }
}

export function opacity_simd(fb, amount) {
  if (mod === null) init_mod();
  const { memory, opacity } = new WebAssembly.Instance(mod).exports;

  memory.grow(ceil((16 + fb.buffer.length) / 65536));

  const u32 = to_u32(fb.buffer);
  const o32 = new Uint32Array(memory.buffer, 16, u32.length);
  o32.set(u32); opacity(fb.width, fb.height, amount); u32.set(o32);
}

function init_mod() {
  mod = new WebAssembly.Module(Uint8Array.of(0,97,115,109,1,0,0,0,1,7,1,96,3,127,127,125,0,3,2,1,0,5,3,1,0,1,7,20,2,6,109,101,109,111,114,121,2,0,7,111,112,97,99,105,116,121,0,0,10,177,3,1,174,3,2,2,123,5,127,2,64,32,0,32,1,108,34,0,65,2,116,69,13,0,32,2,67,0,0,128,63,32,2,67,0,0,128,63,93,27,67,0,0,0,0,151,33,2,32,0,65,255,255,255,255,3,113,34,0,65,1,32,0,65,1,75,27,34,7,65,4,79,4,64,32,7,65,252,255,255,255,3,113,34,5,65,4,107,34,0,65,2,118,65,1,106,34,6,65,1,113,32,2,253,19,33,4,2,64,32,0,69,4,64,65,0,33,1,12,1,11,65,0,33,1,65,0,32,6,65,254,255,255,255,7,113,107,33,6,65,16,33,0,3,64,32,0,32,4,32,0,253,0,4,0,34,3,65,24,253,173,1,253,251,1,253,230,1,253,249,1,65,24,253,171,1,32,3,253,12,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,253,78,253,80,253,11,4,0,32,0,65,16,106,34,9,253,0,4,0,33,3,32,9,32,4,32,3,65,24,253,173,1,253,251,1,253,230,1,253,249,1,65,24,253,171,1,32,3,253,12,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,253,78,253,80,253,11,4,0,32,0,65,32,106,33,0,32,1,65,8,106,33,1,32,6,65,2,106,34,6,13,0,11,11,4,64,32,1,65,2,116,65,16,106,34,0,253,0,4,0,33,3,32,0,32,4,32,3,65,24,253,173,1,253,251,1,253,230,1,253,249,1,65,24,253,171,1,32,3,253,12,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,253,78,253,80,253,11,4,0,11,32,5,32,7,70,13,1,11,32,7,32,5,107,33,1,32,5,65,2,116,65,16,106,33,0,3,64,32,0,65,3,106,34,5,32,2,32,5,45,0,0,179,148,252,1,58,0,0,32,0,65,4,106,33,0,32,1,65,1,107,34,1,13,0,11,11,11));
}